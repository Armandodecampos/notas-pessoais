<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login com Supabase</title>
    <!-- Carrega o Tailwind CSS para estilização rápida e responsiva -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            @apply bg-gray-100 flex items-center justify-center min-h-screen p-4;
        }
        .user-card {
            @apply flex flex-col items-center p-4 bg-white rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300 cursor-pointer;
        }
        .user-avatar {
            @apply w-16 h-16 rounded-full object-cover mb-2;
        }
        .user-email {
            @apply text-sm text-gray-700 font-medium;
        }
    </style>
</head>
<body>

    <div id="app" class="bg-white p-8 rounded-2xl shadow-xl w-full max-w-md space-y-6">
        <h1 id="main-title" class="text-3xl font-bold text-center text-gray-800">Login</h1>

        <!-- Lista de Usuários -->
        <div id="user-list-container" class="grid grid-cols-2 gap-4">
            <!-- Usuários serão injetados aqui via JavaScript -->
        </div>

        <!-- Formulário de Login (inicialmente escondido) -->
        <div id="login-form-container" class="hidden space-y-6">
            <button id="back-button" class="w-full flex items-center justify-center px-4 py-2 bg-gray-200 text-gray-800 font-semibold rounded-md shadow-sm hover:bg-gray-300 focus:outline-none transition-all">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
                Voltar
            </button>
            <p id="selected-email-display" class="text-center font-semibold text-gray-700 text-lg"></p>
            <div class="relative">
                <label for="password" class="block text-sm font-medium text-gray-700">Senha</label>
                <input type="password" id="password" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>
            
            <div class="flex flex-col space-y-3">
                <button id="login-button" class="w-full px-4 py-2 bg-indigo-600 text-white font-semibold rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all">
                    Entrar
                </button>
                <button id="reset-password-button" class="w-full px-4 py-2 bg-yellow-500 text-white font-semibold rounded-md shadow-sm hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-400 transition-all">
                    Redefinir Senha
                </button>
            </div>
        </div>

        <!-- Formulário de Nova Senha (inicialmente escondido) -->
        <div id="new-password-container" class="hidden space-y-6">
            <p class="text-center font-semibold text-gray-700 text-lg">Defina sua nova senha</p>
            <div class="relative">
                <label for="new-password" class="block text-sm font-medium text-gray-700">Nova Senha</label>
                <input type="password" id="new-password" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>
            <div class="relative">
                <label for="confirm-password" class="block text-sm font-medium text-gray-700">Confirme a Senha</label>
                <input type="password" id="confirm-password" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>
            <button id="update-password-button" class="w-full px-4 py-2 bg-indigo-600 text-white font-semibold rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all">
                Confirmar
            </button>
        </div>

        <!-- Área do Usuário Logado -->
        <div id="user-info-container" class="hidden space-y-4 text-center">
            <h2 class="text-2xl font-bold text-gray-800">Bem-vindo(a)!</h2>
            <p id="user-email-display" class="text-lg text-gray-600 font-medium"></p>
            <button id="logout-button" class="w-full px-4 py-2 bg-red-500 text-white font-semibold rounded-md shadow-sm hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-400 transition-all">
                    Sair
                </button>
        </div>

        <!-- Área de Mensagens -->
        <div id="message-container" class="text-sm font-medium p-3 rounded-lg text-center" style="display: none;"></div>
        
    </div>
    
    <!-- Modal para confirmação de redefinição de senha -->
    <div id="reset-password-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm text-center space-y-4">
            <h3 class="text-xl font-bold text-gray-800">Verifique seu Email</h3>
            <p class="text-gray-600">Um link para redefinição de senha foi enviado para <span id="reset-email-display" class="font-semibold text-indigo-600"></span>. Siga as instruções para criar uma nova senha.</p>
            <button id="close-modal-button" class="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700">OK</button>
        </div>
    </div>

    <script type="module">
        // --- CONFIGURAÇÃO DO SUPABASE ---
        // ATENÇÃO: SUBSTITUA COM AS SUAS CHAVES DO SUPABASE
        const SUPABASE_URL = 'https://hkkhidgrwazwjdoipetn.supabase.co'; // Substitua com o seu URL do projeto
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imhra2hpZGdyd2F6d2pkb2lwZXRuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgxMDgwMzksImV4cCI6MjA3MzY4NDAzOX0.cv93OY0kENNuVyQbLWXjdVvRI_OzytIpy-i_H4JJtXs'; // Substitua com a sua chave anon

        import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm';

        const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

        // --- REFERÊNCIAS DE ELEMENTOS HTML ---
        const userListContainer = document.getElementById('user-list-container');
        const loginFormContainer = document.getElementById('login-form-container');
        const userInfoContainer = document.getElementById('user-info-container');
        const userEmailDisplay = document.getElementById('user-email-display');
        const selectedEmailDisplay = document.getElementById('selected-email-display');
        const messageContainer = document.getElementById('message-container');
        const passwordInput = document.getElementById('password');
        const loginButton = document.getElementById('login-button');
        const resetPasswordButton = document.getElementById('reset-password-button');
        const logoutButton = document.getElementById('logout-button');
        const backButton = document.getElementById('back-button');
        const resetPasswordModal = document.getElementById('reset-password-modal');
        const resetEmailDisplay = document.getElementById('reset-email-display');
        const closeModalButton = document.getElementById('close-modal-button');
        const newPasswordContainer = document.getElementById('new-password-container');
        const newPasswordInput = document.getElementById('new-password');
        const confirmPasswordInput = document.getElementById('confirm-password');
        const updatePasswordButton = document.getElementById('update-password-button');
        
        let selectedEmail = ''; // Variável para armazenar o email selecionado

        // --- FUNÇÕES DE INICIALIZAÇÃO E UI ---

        // Função para buscar os emails do Supabase e popular o dropdown
        async function fetchUsers() {
            const { data, error } = await supabase
                .from('profiles')
                .select('username'); // Assume que a coluna de email se chama 'username' na tabela 'profiles'

            if (error) {
                console.error('Erro ao buscar usuários:', error);
                showMessage('Erro ao carregar a lista de usuários. Verifique as permissões de leitura no Supabase.', true);
                userListContainer.innerHTML = '<p class="text-center text-gray-500">Erro ao carregar...</p>';
            } else if (data.length === 0) {
                 userListContainer.innerHTML = '<p class="text-center text-gray-500">Nenhum usuário encontrado. Adicione usuários na tabela `profiles` do Supabase.</p>';
            } else {
                userListContainer.innerHTML = ''; // Limpa o conteúdo
                data.forEach(user => {
                    const userCard = document.createElement('button');
                    userCard.className = 'user-card';
                    userCard.dataset.email = user.username;
                    userCard.innerHTML = `
                        <img src="https://placehold.co/100x100/A0A0A0/FFFFFF?text=${user.username.charAt(0).toUpperCase()}" alt="Profile" class="user-avatar">
                        <p class="user-email">${user.username}</p>
                    `;
                    userListContainer.appendChild(userCard);
                });
            }
        }
        
        // Função para mostrar mensagens de status
        function showMessage(message, isError = false) {
            messageContainer.textContent = message;
            messageContainer.style.display = 'block';
            if (isError) {
                messageContainer.classList.add('bg-red-200', 'text-red-700');
                messageContainer.classList.remove('bg-green-200', 'text-green-700');
            } else {
                messageContainer.classList.add('bg-green-200', 'text-green-700');
                messageContainer.classList.remove('bg-red-200', 'text-red-700');
            }
        }

        // Função para alternar a visibilidade das áreas
        function toggleUI(isLoggedIn, view) {
            userListContainer.classList.add('hidden');
            loginFormContainer.classList.add('hidden');
            userInfoContainer.classList.add('hidden');
            newPasswordContainer.classList.add('hidden');

            if (isLoggedIn) {
                userInfoContainer.classList.remove('hidden');
            } else if (view === 'login') {
                loginFormContainer.classList.remove('hidden');
            } else if (view === 'new-password') {
                newPasswordContainer.classList.remove('hidden');
            } else {
                userListContainer.classList.remove('hidden');
            }
        }

        // --- EVENT LISTENERS ---
        // Delegação de evento para os botões de usuário
        userListContainer.addEventListener('click', (e) => {
            const userCard = e.target.closest('.user-card');
            if (userCard) {
                selectedEmail = userCard.dataset.email;
                selectedEmailDisplay.textContent = selectedEmail;
                toggleUI(false, 'login');
            }
        });

        // Evento para o botão de Login
        loginButton.addEventListener('click', async () => {
            const email = selectedEmail;
            const password = passwordInput.value;
            showMessage('Entrando...', false);

            const { error } = await supabase.auth.signInWithPassword({ email, password });

            if (error) {
                console.error(error);
                // Adiciona uma mensagem de erro mais útil para o usuário
                if (error.message.includes('Invalid login credentials')) {
                    showMessage('Credenciais inválidas. Verifique sua senha.', true);
                } else {
                    showMessage(error.message, true);
                }
            } else {
                showMessage('Login bem-sucedido!', false);
                // A UI será atualizada pelo listener de autenticação
            }
        });

        // Evento para o botão de Redefinir Senha
        resetPasswordButton.addEventListener('click', async () => {
            const email = selectedEmail;
            // Define o URL de redirecionamento para o seu próprio site
            const redirectToUrl = `${window.location.origin}${window.location.pathname}#redefinir-senha`;

            showMessage('Enviando email de redefinição...', false);

            const { error } = await supabase.auth.resetPasswordForEmail(email, {
                redirectTo: redirectToUrl
            });

            if (error) {
                console.error(error);
                showMessage(error.message, true);
            } else {
                resetEmailDisplay.textContent = email;
                resetPasswordModal.classList.remove('hidden');
                resetPasswordModal.classList.add('flex');
            }
        });

        // Evento para o botão de Voltar
        backButton.addEventListener('click', () => {
            toggleUI(false, 'user-list');
            passwordInput.value = ''; // Limpa a senha
            showMessage('', false); // Limpa a mensagem
        });

        // Evento para atualizar a senha
        updatePasswordButton.addEventListener('click', async () => {
            const newPassword = newPasswordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            if (newPassword !== confirmPassword) {
                showMessage('As senhas não coincidem.', true);
                return;
            }
            if (newPassword.length < 6) {
                showMessage('A senha deve ter pelo menos 6 caracteres.', true);
                return;
            }

            showMessage('Atualizando sua senha...', false);

            const { error } = await supabase.auth.updateUser({ password: newPassword });

            if (error) {
                console.error(error);
                showMessage(error.message, true);
            } else {
                showMessage('Senha atualizada com sucesso! Você já está logado.', false);
                // A UI será atualizada pelo listener de autenticação
                newPasswordInput.value = '';
                confirmPasswordInput.value = '';
            }
        });

        // Fecha o modal de redefinição de senha
        closeModalButton.addEventListener('click', () => {
            resetPasswordModal.classList.add('hidden');
            resetPasswordModal.classList.remove('flex');
            showMessage('', false); // Limpa a mensagem
        });

        // Evento para o botão de Sair
        logoutButton.addEventListener('click', async () => {
            const { error } = await supabase.auth.signOut();
            if (error) {
                console.error(error);
                showMessage('Erro ao sair.', true);
            } else {
                showMessage('Sessão encerrada.', false);
                toggleUI(false, 'user-list');
                passwordInput.value = ''; // Limpa o campo de senha
            }
        });

        // --- VERIFICAÇÃO DE ESTADO DE AUTENTICAÇÃO E URL ---
        // Listener que reage a mudanças no estado de autenticação
        supabase.auth.onAuthStateChange((event, session) => {
            console.log('Auth state change:', event, session);
            if (session) {
                // Usuário logado
                userEmailDisplay.textContent = session.user.email;
                toggleUI(true);
            } else {
                // Usuário deslogado
                const urlHash = window.location.hash.substring(1);
                if (urlHash === 'redefinir-senha') {
                    // Se o hash for 'redefinir-senha', mostra a tela de nova senha
                    toggleUI(false, 'new-password');
                } else {
                    toggleUI(false, 'user-list');
                }
                passwordInput.value = ''; // Limpa o campo de senha
            }
        });
        
        // Chamada inicial para carregar os usuários
        fetchUsers();
    </script>
</body>
</html>
