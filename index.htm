<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-s`cale=1.0">
    <title>Login com Supabase</title>
    <!-- Carrega o Tailwind CSS para estilização rápida e responsiva -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Adiciona Font Awesome para os ícones -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" xintegrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            @apply bg-gray-100;
        }
        .user-card {
            @apply flex flex-col items-center justify-center text-center p-4 bg-white rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300 cursor-pointer w-40 h-40;
        }
        .user-avatar {
            width: 64px;
            height: 64px;
            @apply rounded-full object-cover mb-2;
        }
        .user-email {
            @apply text-sm text-gray-700 font-medium truncate;
        }
        .shopping-list-item {
            @apply flex items-center justify-between p-3 border-b border-gray-200;
        }
        .shopping-list-item:last-child {
            @apply border-b-0;
        }
        .editable-item {
            @apply outline-none focus:ring-2 focus:ring-indigo-500 rounded-md;
        }
        .item-checked {
            @apply bg-green-200;
        }
        /* Estilos para a grade de botões arrastáveis */
        .app-container {
            @apply flex flex-col items-center w-24; /* Container for icon + label */
            cursor: move;
        }
        .grid-item {
            background-color: #333;
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease-in-out;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
        }
        .grid-item:hover {
            background-color: #1f2937; /* bg-gray-800 */
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1); /* shadow-lg */
        }
        .app-container.dragging {
            @apply opacity-50;
        }
        .grid-item-icon {
            font-size: 2.25rem; /* Equivalente a text-4xl */
            color: white;
        }
        .grid-item-label {
            @apply text-center font-semibold text-gray-700 text-sm mt-2;
        }
        /* Estilos para as Notas */
        .note-item {
            background-color: #FDE68A; /* Amarelo um pouco mais forte (Tailwind yellow-200) */
            box-shadow: 0 4px 8px rgba(0,0,0,0.15); /* Sombra mais visível */
            padding: 15px;
            @apply rounded-lg h-48 flex flex-col justify-between transition-transform duration-200;
        }
        .note-item:hover {
            @apply scale-105;
        }
        .note-content {
            min-width: 0; /* Essencial para forçar a quebra de texto */
            word-wrap: break-word; /* Garante a quebra de palavras muito longas */
            @apply text-gray-800 flex-grow whitespace-pre-wrap text-left;
            font-family: 'Inter', sans-serif;
            font-size: 1rem;
        }
        .note-actions {
            display: flex;
            justify-content: space-between;
            width: 100%;
            align-items: center;
            padding-top: 0.5rem; /* Equivalente a pt-2 */
        }
        .note-button {
            @apply cursor-pointer;
        }
    </style>
</head>
<body>
    <!-- Novo container principal para centralizar todos os elementos -->
    <div id="main-container" class="flex items-start sm:items-center justify-center min-h-screen p-4 pt-20 sm:pt-4">
        <!-- Conteúdo do Login -->
        <div id="app" class="bg-white w-full max-w-md space-y-6">
            <div id="initial-login-view" class="text-center">
                 <button id="show-profiles-button" class="w-full mt-6 px-4 py-3 bg-indigo-600 text-white font-semibold rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all text-lg">
                    Login
                </button>
            </div>

            <!-- Lista de Usuários (inicialmente escondida) -->
            <div id="user-list-container" class="hidden flex-wrap justify-center gap-4">
                <!-- Usuários serão injetados aqui via JavaScript -->
            </div>

            <!-- Formulário de Login (inicialmente escondido) -->
            <div id="login-form-container" class="hidden flex flex-col items-center space-y-4 p-4">
                <!-- Campo da Senha -->
                <div class="w-full">
                    <label for="password" class="block text-lg font-medium text-gray-700 text-center mb-2">Senha</label>
                    <input type="password" id="password" class="block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-center text-lg">
                </div>

                <!-- Botão de Entrar -->
                <button id="login-button" class="w-full px-4 py-3 bg-green-500 text-white font-semibold rounded-md shadow-sm hover:bg-green-600 focus:outline-none transition-all text-lg">
                    Entrar
                </button>
                
                <!-- Botões secundários -->
                <div class="flex justify-between w-full pt-4">
                    <button id="back-button" class="px-6 py-2 bg-red-500 text-white font-semibold rounded-md shadow-sm hover:bg-red-600 focus:outline-none transition-all flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                        </svg>
                        Voltar
                    </button>
                    <button id="reset-password-button" class="px-6 py-2 bg-orange-500 text-white font-semibold rounded-md shadow-sm hover:bg-orange-600 focus:outline-none transition-all">
                        Redefinir Senha
                    </button>
                </div>
            </div>

            <!-- Formulário de Nova Senha (inicialmente escondido) -->
            <div id="new-password-container" class="hidden space-y-6">
                <button id="back-button-new-password" class="w-full flex items-center justify-center px-4 py-2 bg-gray-200 text-gray-800 font-semibold rounded-md shadow-sm hover:bg-gray-300 focus:outline-none transition-all">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                    Voltar
                </button>
                <p class="text-center font-semibold text-gray-700 text-lg">Defina sua nova senha</p>
                <div class="relative">
                    <label for="new-password" class="block text-sm font-medium text-gray-700">Nova Senha</label>
                    <input type="password" id="new-password" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div class="relative">
                    <label for="confirm-password" class="block text-sm font-medium text-gray-700">Confirme a Senha</label>
                    <input type="password" id="confirm-password" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <button id="update-password-button" class="w-full px-4 py-2 bg-indigo-600 text-white font-semibold rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all">
                    Confirmar
                </button>
            </div>
        </div>
    </div>
    
    <!-- Nova tela do usuário logado -->
    <div id="logged-in-app" class="hidden h-screen overflow-hidden">
        <!-- Container fixo no canto superior esquerdo -->
        <div id="main-header" class="fixed top-0 left-0 right-0 bg-white p-4 shadow-md z-40 h-24 flex items-center">
            <button id="profile-button" class="flex items-center space-x-4 p-2 rounded-full hover:bg-gray-200 transition-colors duration-200 focus:outline-none">
                <img id="user-avatar-logged-in" src="https://placehold.co/100x100/A0A0A0/FFFFFF?text=P" alt="Profile" class="w-12 h-12 rounded-full object-cover">
                <p id="user-email-display" class="text-xl text-gray-800 font-bold"></p>
            </button>
        </div>
        
        <!-- Grade de botões arrastáveis -->
        <div id="button-grid-container" class="fixed top-24 inset-x-0 bottom-0 p-4 grid [grid-template-columns:repeat(auto-fill,minmax(100px,1fr))] gap-4 overflow-y-auto justify-items-center">
            <!-- Item 1: Lista de Compras -->
            <div class="app-container" draggable="true" id="shopping-list-item-grid">
                <div class="grid-item">
                    <i class="fas fa-shopping-cart grid-item-icon"></i>
                </div>
                <span class="grid-item-label">Compras</span>
            </div>
            <!-- Item 2: Notas Pessoais -->
            <div class="app-container" draggable="true" id="notes-app-item-grid">
                <div class="grid-item">
                    <i class="fas fa-sticky-note grid-item-icon"></i>
                </div>
                <span class="grid-item-label">Notas</span>
            </div>
        </div>
    </div>

    <!-- Modal para opções do perfil -->
    <div id="profile-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <div class="flex justify-end">
                <button id="close-profile-modal" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <h3 class="text-2xl font-bold text-gray-800">Opções do Perfil</h3>
            <button id="edit-profile-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors">
                Editar Perfil
            </button>
            <button id="change-password-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors">
                Trocar Senha
            </button>
            <button id="settings-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors">
                Configurações
            </button>
            <button id="logout-button" class="w-full px-4 py-3 bg-red-500 text-white font-semibold rounded-md hover:bg-red-600 transition-colors">
                Sair
            </button>
        </div>
    </div>
    
    <!-- Novo Modal para editar perfil -->
    <div id="edit-profile-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <div class="flex justify-end">
                <button id="close-edit-profile-modal" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <h3 class="text-2xl font-bold text-gray-800">Editar Perfil</h3>
            
            <!-- Novo campo para o nome do perfil -->
            <div class="relative">
                <label for="profile-name" class="block text-sm font-medium text-gray-700 text-left">Nome do Perfil</label>
                <input type="text" id="profile-name-input" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>
            <button id="update-profile-button" class="w-full px-4 py-3 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 transition-colors">
                Salvar Nome do Perfil
            </button>

            <label for="avatar-upload" class="block text-sm font-medium text-gray-700 text-left">Trocar Foto</label>
            <input type="file" id="avatar-upload" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100"/>
            <button id="upload-avatar-button" class="w-full px-4 py-3 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 transition-colors">
                Fazer Upload da Foto
            </button>
            <p id="upload-message" class="text-sm font-medium p-2 rounded-lg" style="display: none;"></p>
        </div>
    </div>
    
    <!-- Modal para confirmação de redefinição de senha -->
    <div id="reset-password-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm text-center space-y-4">
            <h3 class="text-xl font-bold text-gray-800">Verifique seu Email</h3>
            <p class="text-gray-600">Um link para redefinição de senha foi enviado para <span id="reset-email-display" class="font-semibold text-indigo-600"></span>. Siga as instruções para criar uma nova senha.</p>
            <button id="close-modal-button" class="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700">OK</button>
        </div>
    </div>

    <!-- Novo Modal de Mensagem de Espera -->
    <div id="wait-message-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <h3 class="text-xl font-bold text-gray-800">Aguarde</h3>
            <p class="text-gray-600">É necessário aguardar para enviar outro e-mail. Por favor, aguarde <span id="wait-time" class="font-semibold text-indigo-600"></span> segundos.</p>
            <button id="close-wait-modal" class="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700">OK</button>
        </div>
    </div>

    <!-- Novo Modal da Lista de Compras -->
    <div id="shopping-list-modal" class="fixed inset-0 bg-gray-100 hidden flex-col z-50">
        <!-- Cabeçalho do Modal -->
        <header class="flex flex-col p-4 bg-white shadow-md">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-2xl font-bold text-gray-800">Lista de Compras</h2>
                <button id="close-shopping-list-button" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <!-- Botões de filtro -->
            <div class="flex justify-center space-x-2">
                <button id="filter-all" class="filter-button bg-indigo-200 text-indigo-800 font-semibold py-2 px-4 rounded-md transition-colors duration-200">Todos</button>
                <button id="filter-to-buy" class="filter-button bg-orange-200 text-orange-800 font-semibold py-2 px-4 rounded-md transition-colors duration-200">Para comprar</button>
                <button id="filter-bought" class="filter-button bg-green-200 text-green-800 font-semibold py-2 px-4 rounded-md transition-colors duration-200">Comprados</button>
            </div>
        </header>

        <!-- Corpo da Lista de Itens -->
        <div id="shopping-list-container" class="flex-grow overflow-y-auto p-4 space-y-2 pb-20">
            <!-- Itens da lista serão injetados aqui -->
        </div>

        <!-- Botão fixo para adicionar novo item -->
        <footer class="p-4 bg-white shadow-lg fixed bottom-0 left-0 right-0">
            <button id="show-add-item-modal-button" class="w-full px-4 py-3 bg-orange-200 text-orange-800 font-semibold rounded-md hover:bg-orange-300 transition-colors">
                Adicionar item para comprar
            </button>
        </footer>
    </div>
    
    <!-- Novo Modal para Adicionar Itens -->
    <div id="add-item-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full space-y-4">
            <div class="flex justify-between items-center">
                 <h3 class="text-2xl font-bold text-gray-800">Adicionar Item</h3>
                 <button id="close-add-item-modal" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <div class="relative">
                <label for="add-item-name-input" class="block text-sm font-medium text-gray-700 text-left">Nome do Item</label>
                <input type="text" id="add-item-name-input" placeholder="Ex: Maçãs" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>
            <div class="flex space-x-2">
                <div class="relative flex-grow">
                    <label for="add-item-quantity-input" class="block text-sm font-medium text-gray-700 text-left">Quantidade</label>
                    <input type="number" id="add-item-quantity-input" placeholder="Qtd" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div class="relative">
                    <label for="add-item-unit-input" class="block text-sm font-medium text-gray-700 text-left">Unidade</label>
                    <select id="add-item-unit-input" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="uni">un</option>
                        <option value="kg">kg</option>
                        <option value="g">g</option>
                        <option value="litro">litro</option>
                        <option value="ml">ml</option>
                    </select>
                </div>
            </div>
            <div class="flex justify-between space-x-4">
                <button id="add-item-confirm-button" class="w-full px-4 py-3 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 transition-colors">
                    Adicionar
                </button>
                 <button id="add-item-cancel-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors">
                    Cancelar
                </button>
            </div>
        </div>
    </div>

    <!-- Novo Modal para editar itens da lista de compras -->
    <div id="edit-item-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <div class="flex justify-end">
                <button id="close-edit-item-modal" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <h3 class="text-2xl font-bold text-gray-800">Editar Item</h3>
            <div class="relative">
                <label for="edit-item-input" class="block text-sm font-medium text-gray-700 text-left">Nome do Item</label>
                <input type="text" id="edit-item-input" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>
            <div class="relative">
                <label for="edit-item-quantity" class="block text-sm font-medium text-gray-700 text-left">Quantidade</label>
                <input type="number" id="edit-item-quantity" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>
            <div class="relative">
                <label for="edit-item-unit" class="block text-sm font-medium text-gray-700 text-left">Unidade</label>
                <select id="edit-item-unit" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                    <option value="uni">un</option>
                    <option value="kg">kg</option>
                    <option value="g">g</option>
                    <option value="litro">litro</option>
                    <option value="ml">ml</option>
                </select>
            </div>
            <div class="flex justify-between space-x-4">
                <button id="save-edit-button" class="w-full px-4 py-3 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 transition-colors">
                    Confirmar
                </button>
                <button id="cancel-edit-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors">
                    Cancelar
                </button>
            </div>
        </div>
    </div>

    <!-- Modal para Configurações de Papel de Parede -->
    <div id="settings-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <div class="flex justify-end">
                <button id="close-settings-modal" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <h3 class="text-2xl font-bold text-gray-800">Personalizar Papel de Parede</h3>
            
            <div class="relative">
                <label for="wallpaper-color-input" class="block text-sm font-medium text-gray-700 text-left">Escolher uma cor de fundo</label>
                <input type="color" id="wallpaper-color-input" class="mt-1 block w-full h-10 px-1 py-1 border border-gray-300 rounded-md shadow-sm">
            </div>
    
            <div>
                <label for="wallpaper-upload" class="block text-sm font-medium text-gray-700 text-left">Carregar uma imagem</label>
                <input type="file" id="wallpaper-upload" accept="image/*" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 mt-1"/>
                <p id="wallpaper-upload-message" class="text-sm font-medium p-2 rounded-lg" style="display: none;"></p>
            </div>
            
            <button id="remove-wallpaper-button" class="w-full px-4 py-3 bg-red-500 text-white font-semibold rounded-md hover:bg-red-600 transition-colors">
                Remover Papel de Parede
            </button>
        </div>
    </div>

    <!-- Modal de Notas Pessoais -->
    <div id="notes-modal" class="fixed inset-0 bg-gray-100 hidden flex-col z-50">
        <header class="flex items-center justify-between p-4 bg-white shadow-md">
            <h2 class="text-2xl font-bold text-gray-800">Notas</h2>
            <button id="close-notes-modal-button" class="text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </header>
        <div id="notes-container" class="flex-grow overflow-y-auto p-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 items-start">
            <!-- As notas serão inseridas aqui -->
        </div>
        <footer class="p-4 bg-white shadow-lg">
            <div class="flex gap-2">
                <textarea id="new-note-input" rows="1" class="w-full p-2 border rounded-md resize-none" placeholder="Escreva a sua nota..."></textarea>
                <button id="add-note-button" class="px-6 py-2 bg-yellow-400 text-yellow-900 font-semibold rounded-md hover:bg-yellow-500 transition-colors">Adicionar</button>
            </div>
        </footer>
    </div>

    <!-- Modal para Editar Nota -->
    <div id="edit-note-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-[60]">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-md w-full space-y-4">
             <div class="flex justify-between items-center">
                 <h3 class="text-2xl font-bold text-gray-800">Editar Nota</h3>
                 <button id="close-edit-note-modal-button" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <textarea id="edit-note-input" rows="6" class="w-full p-2 border rounded-md resize-y"></textarea>
            <div class="flex justify-end space-x-4">
                <button id="cancel-note-edit-button" class="px-6 py-2 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300">Cancelar</button>
                <button id="save-note-edit-button" class="px-6 py-2 bg-yellow-400 text-yellow-900 font-semibold rounded-md hover:bg-yellow-500">Salvar</button>
            </div>
        </div>
    </div>

    <!-- Modal para confirmação de exclusão -->
    <div id="delete-confirm-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-[60]">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <h3 class="text-xl font-bold text-gray-800">Confirmar Exclusão</h3>
            <p id="delete-confirm-message" class="text-gray-600">Tem certeza que deseja excluir este item da lista?</p>
            <div class="flex justify-center space-x-4">
                <button id="cancel-delete-button" class="px-6 py-2 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300">Cancelar</button>
                <button id="confirm-delete-button" class="px-6 py-2 bg-red-500 text-white font-semibold rounded-md hover:bg-red-600">Excluir</button>
            </div>
        </div>
    </div>

    <!-- Modal para confirmação de mover item -->
    <div id="move-item-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-[60]">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <h3 class="text-xl font-bold text-gray-800">Confirmar Ação</h3>
            <p id="move-item-confirm-message" class="text-gray-600"></p>
            <div class="flex justify-center space-x-4">
                <button id="cancel-move-button" class="px-6 py-2 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300">Cancelar</button>
                <button id="confirm-move-button" class="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700">Confirmar</button>
            </div>
        </div>
    </div>


    <script type="module">
        // --- CONFIGURAÇÃO DO SUPABASE ---
        // !!! ERRO DE API KEY !!!
        // O erro "Invalid API key" significa que os valores abaixo estão incorretos.
        // Por favor, substitua 'SUA_SUPABASE_URL' e 'SUA_SUPABASE_ANON_KEY' pelas chaves
        // corretas do seu projeto no painel do Supabase.

        const SUPABASE_URL = 'https://jtwybbvfbcwitbumsxno.supabase.co'; // Substitua com o seu URL do projeto
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0d3liYnZmYmN3aXRidW1zeG5vIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgxMTc4NTUsImV4cCI6MjA3MzY5Mzg1NX0.Q9ro0O3dSSGEPMukNHz-wqoHBUMdEVPKKPoCVH_1epQ'; // Substitua com a sua chave anon (pública)


        import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm';

        // Configura o cliente do Supabase para não persistir a sessão no navegador
        const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
            auth: {
                persistSession: false
            }
        });

        // --- REFERÊNCIAS DE ELEMENTOS HTML ---
        const mainContainer = document.getElementById('main-container');
        const app = document.getElementById('app');
        const loggedInAppContainer = document.getElementById('logged-in-app');
        const userListContainer = document.getElementById('user-list-container');
        const loginFormContainer = document.getElementById('login-form-container');
        const userEmailDisplay = document.getElementById('user-email-display');
        const passwordInput = document.getElementById('password');
        const loginButton = document.getElementById('login-button');
        const resetPasswordButton = document.getElementById('reset-password-button');
        const backButton = document.getElementById('back-button');
        const resetPasswordModal = document.getElementById('reset-password-modal');
        const resetEmailDisplay = document.getElementById('reset-email-display');
        const closeModalButton = document.getElementById('close-modal-button');
        const newPasswordContainer = document.getElementById('new-password-container');
        const newPasswordInput = document.getElementById('new-password');
        const confirmPasswordInput = document.getElementById('confirm-password');
        const updatePasswordButton = document.getElementById('update-password-button');
        const backButtonNewPassword = document.getElementById('back-button-new-password');
        const userInitialsLoggedIn = document.getElementById('user-initials-logged-in');

        // Novas referências
        const profileButton = document.getElementById('profile-button');
        const profileModal = document.getElementById('profile-modal');
        const closeProfileModalButton = document.getElementById('close-profile-modal');
        const editProfileButton = document.getElementById('edit-profile-button');
        const changePasswordButton = document.getElementById('change-password-button');
        const logoutButtonModal = document.getElementById('logout-button');
        const editProfileModal = document.getElementById('edit-profile-modal');
        const closeEditProfileModalButton = document.getElementById('close-edit-profile-modal');
        const avatarUploadInput = document.getElementById('avatar-upload');
        const uploadAvatarButton = document.getElementById('upload-avatar-button');
        const uploadMessage = document.getElementById('upload-message');
        const userAvatarLoggedIn = document.getElementById('user-avatar-logged-in');
        const profileNameInput = document.getElementById('profile-name-input');
        const updateProfileButton = document.getElementById('update-profile-button');
        
        // Referências do novo modal de espera
        const waitMessageModal = document.getElementById('wait-message-modal');
        const waitTimeSpan = document.getElementById('wait-time');
        const closeWaitModalButton = document.getElementById('close-wait-modal');

        // Referências da nova lista de compras
        const shoppingListItemGrid = document.getElementById('shopping-list-item-grid');
        const shoppingListModal = document.getElementById('shopping-list-modal');
        const closeShoppingListButton = document.getElementById('close-shopping-list-button');
        const shoppingListContainer = document.getElementById('shopping-list-container');
        const filterAllButton = document.getElementById('filter-all');
        const filterToBuyButton = document.getElementById('filter-to-buy');
        const filterBoughtButton = document.getElementById('filter-bought');
        
        // Referências do novo modal de adicionar item
        const showAddItemModalButton = document.getElementById('show-add-item-modal-button');
        const addItemModal = document.getElementById('add-item-modal');
        const closeAddItemModalButton = document.getElementById('close-add-item-modal');
        const addItemNameInput = document.getElementById('add-item-name-input');
        const addItemQuantityInput = document.getElementById('add-item-quantity-input');
        const addItemUnitInput = document.getElementById('add-item-unit-input');
        const addItemConfirmButton = document.getElementById('add-item-confirm-button');
        const addItemCancelButton = document.getElementById('add-item-cancel-button');

        // Referências do novo modal de edição
        const editItemModal = document.getElementById('edit-item-modal');
        const closeEditItemModalButton = document.getElementById('close-edit-item-modal');
        const editItemInput = document.getElementById('edit-item-input');
        const editItemQuantity = document.getElementById('edit-item-quantity');
        const editItemUnit = document.getElementById('edit-item-unit');
        const saveEditButton = document.getElementById('save-edit-button');
        const cancelEditButton = document.getElementById('cancel-edit-button');
        
        // Referências do modal de confirmação de exclusão
        const deleteConfirmModal = document.getElementById('delete-confirm-modal');
        const confirmDeleteButton = document.getElementById('confirm-delete-button');
        const cancelDeleteButton = document.getElementById('cancel-delete-button');

        // Referências do modal de mover item
        const moveItemModal = document.getElementById('move-item-modal');
        const moveItemConfirmMessage = document.getElementById('move-item-confirm-message');
        const confirmMoveButton = document.getElementById('confirm-move-button');
        const cancelMoveButton = document.getElementById('cancel-move-button');

        // Referências do modal de configurações
        const settingsButton = document.getElementById('settings-button');
        const settingsModal = document.getElementById('settings-modal');
        const closeSettingsModalButton = document.getElementById('close-settings-modal');
        const wallpaperColorInput = document.getElementById('wallpaper-color-input');
        const wallpaperUploadInput = document.getElementById('wallpaper-upload');
        const wallpaperUploadMessage = document.getElementById('wallpaper-upload-message');
        const removeWallpaperButton = document.getElementById('remove-wallpaper-button');
        const buttonGridContainer = document.getElementById('button-grid-container');
        const mainHeader = document.getElementById('main-header');

        // Referências do App de Notas
        const notesAppIcon = document.getElementById('notes-app-item-grid');
        const notesModal = document.getElementById('notes-modal');
        const closeNotesModalButton = document.getElementById('close-notes-modal-button');
        const notesContainer = document.getElementById('notes-container');
        const newNoteInput = document.getElementById('new-note-input');
        const addNoteButton = document.getElementById('add-note-button');
        const editNoteModal = document.getElementById('edit-note-modal');
        const closeEditNoteModalButton = document.getElementById('close-edit-note-modal-button');
        const editNoteInput = document.getElementById('edit-note-input');
        const saveNoteEditButton = document.getElementById('save-note-edit-button');
        const cancelNoteEditButton = document.getElementById('cancel-note-edit-button');

        // Referências da vista de login
        const initialLoginView = document.getElementById('initial-login-view');
        const showProfilesButton = document.getElementById('show-profiles-button');

        let selectedEmail = ''; // Variável para armazenar o email selecionado
        let editingItemId = null; // Variável para armazenar o ID do item sendo editado
        let editingNoteId = null; // Variável para armazenar o ID da nota sendo editada
        let currentFilter = 'all'; // Estado do filtro atual
        let itemToDeleteInfo = null; // {id: string, type: string}
        let itemToMove = null; // { id: string, newStatus: boolean }
        let notesSubscription = null; // Para guardar a subscrição das notas

        // --- FUNÇÕES DE INICIALIZAÇÃO E UI ---

        // Função para buscar os emails do Supabase e popular o dropdown
        async function fetchUsers() {
            const { data, error } = await supabase
                .from('profiles')
                .select('username, avatar_url, profile_name'); // Adiciona profile_name na busca

            if (error) {
                console.error('Erro ao buscar usuários:', error);
            } else if (data.length === 0) {
                 userListContainer.innerHTML = '<p class="text-center text-gray-500">Nenhum usuário encontrado. Adicione usuários na tabela `profiles` do Supabase.</p>';
            } else {
                userListContainer.innerHTML = ''; // Limpa o conteúdo
                data.forEach(user => {
                    const userCard = document.createElement('button');
                    userCard.className = 'user-card';
                    userCard.dataset.email = user.username;
                    // Força o tamanho da imagem na tela inicial para ser 64x64px, igual à da área logada
                    const avatarSrc = user.avatar_url || `https://placehold.co/64x64/A0A0A0/FFFFFF?text=${(user.profile_name || user.username).charAt(0).toUpperCase()}`;
                    userCard.innerHTML = `
                        <img src="${avatarSrc}" alt="Profile" class="user-avatar w-16 h-16 rounded-full">
                        <p class="user-email">${user.profile_name || user.username}</p>
                    `;
                    userListContainer.appendChild(userCard);
                });
            }
        }

        // Função para carregar os dados do perfil logado
        async function loadUserProfile(user) {
            const { data, error } = await supabase
                .from('profiles')
                .select('avatar_url, profile_name')
                .eq('id', user.id)
                .single();
            
            if (!error && data) {
                userAvatarLoggedIn.src = data.avatar_url || `https://placehold.co/100x100/A0A0A0/FFFFFF?text=${(data.profile_name || user.email).charAt(0).toUpperCase()}`;
                userEmailDisplay.textContent = data.profile_name || user.email; // Exibe o nome do perfil
                profileNameInput.value = data.profile_name || ''; // Preenche o campo de edição
            } else {
                const initial = user.email.charAt(0).toUpperCase();
                userAvatarLoggedIn.src = `https://placehold.co/100x100/A0A0A0/FFFFFF?text=${initial}`;
                userEmailDisplay.textContent = user.email;
                profileNameInput.value = '';
            }
        }
        
        // Função para alternar a visibilidade das áreas
        function toggleUI(isLoggedIn, view) {
            // Esconde todos os modais primeiro
            profileModal.classList.add('hidden');
            waitMessageModal.classList.add('hidden');
            editProfileModal.classList.add('hidden');
            settingsModal.classList.add('hidden');
            shoppingListModal.classList.add('hidden');
            deleteConfirmModal.classList.add('hidden');
            addItemModal.classList.add('hidden');
            moveItemModal.classList.add('hidden');
            notesModal.classList.add('hidden');
            editNoteModal.classList.add('hidden');

            if (isLoggedIn) {
                // Mostra a App e esconde o contentor do Login
                loggedInAppContainer.classList.remove('hidden');
                mainContainer.classList.add('hidden');
                
                // Ajusta o estilo do body para a app
                document.body.classList.remove('bg-gray-100');

            } else {
                // Mostra o contentor do Login e esconde a App
                mainContainer.classList.remove('hidden');
                loggedInAppContainer.classList.add('hidden');
                
                // Restaura o estilo do body para o login
                document.body.classList.add('bg-gray-100');
                
                // Esconde todas as vistas dentro do ecrã de login
                initialLoginView.classList.add('hidden');
                userListContainer.classList.add('hidden');
                loginFormContainer.classList.add('hidden');
                newPasswordContainer.classList.add('hidden');

                // Mostra a vista de login correta
                if (view === 'user-list') {
                    userListContainer.classList.remove('hidden');
                    userListContainer.classList.add('flex');
                } else if (view === 'login') {
                    loginFormContainer.classList.remove('hidden');
                } else if (view === 'new-password') {
                    newPasswordContainer.classList.remove('hidden');
                } else { // A vista padrão é a inicial com o botão de login
                    initialLoginView.classList.remove('hidden');
                }
            }
        }

        // Função para exibir o modal de espera com a contagem regressiva
        function showWaitModal(seconds) {
            let timeLeft = seconds;
            waitTimeSpan.textContent = timeLeft;
            waitMessageModal.classList.remove('hidden');
            waitMessageModal.classList.add('flex');

            const timer = setInterval(() => {
                timeLeft--;
                waitTimeSpan.textContent = timeLeft;
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    waitMessageModal.classList.add('hidden');
                    waitMessageModal.classList.remove('flex');
                }
            }, 1000);
        }

        // --- FUNÇÕES DE PAPEL DE PAREDE ---
        
        // Aplica o papel de parede salvo
        function applyWallpaper(preferences) {
            // Estilos padrão se não houver preferências
            const defaultStyles = {
                backgroundImage: 'none',
                backgroundColor: '', // Reverte para o padrão do CSS
                backgroundSize: '',
                backgroundPosition: '',
                backgroundRepeat: ''
            };

            const stylesToApply = { ...defaultStyles };

            if (preferences) {
                if (preferences.type === 'color') {
                    stylesToApply.backgroundColor = preferences.value;
                } else if (preferences.type === 'image') {
                    stylesToApply.backgroundImage = `url(${preferences.value})`;
                    stylesToApply.backgroundSize = 'cover';
                    stylesToApply.backgroundPosition = 'center';
                    stylesToApply.backgroundRepeat = 'no-repeat';
                }
            }

            // Aplica todos os estilos de uma vez para evitar problemas de renderização
            Object.assign(loggedInAppContainer.style, stylesToApply);
        }

        // Salva as preferências do usuário no Supabase
        async function saveUserPreferences(preferences) {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) return;

            const { error } = await supabase
                .from('profiles')
                .update({ preferences: preferences })
                .eq('id', user.id);

            if (error) {
                console.error('Erro ao salvar preferências:', error);
            }
        }
        
        // Carrega as preferências do usuário ao logar
        async function loadUserPreferences() {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) return;

            const { data, error } = await supabase
                .from('profiles')
                .select('preferences')
                .eq('id', user.id)
                .single();
            
            if (error && error.code !== 'PGRST116') { // Ignora erro se não encontrar a linha
                console.error('Erro ao carregar preferências:', error);
            } else if (data && data.preferences) {
                applyWallpaper(data.preferences);
            } else {
                applyWallpaper(null); // Garante que o fundo padrão seja aplicado se não houver preferências
            }
        }

        // --- FUNÇÕES DO APP DE NOTAS ---

        // Busca e renderiza as notas do usuário
        async function fetchNotes() {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) return;

            const { data: notes, error } = await supabase
                .from('notes')
                .select('id, content')
                .eq('user_id', user.id)
                .order('created_at', { ascending: false });

            if (error) {
                console.error('Erro ao buscar notas:', error);
                notesContainer.innerHTML = '<p class="text-red-500">Não foi possível carregar as notas.</p>';
                return;
            }

            renderNotes(notes);
        }

        // Renderiza as notas na tela
        function renderNotes(notes) {
            notesContainer.innerHTML = ''; // Limpa antes de renderizar
            if (notes.length === 0) {
                notesContainer.innerHTML = '<p class="text-gray-500 col-span-full text-center">Ainda não tem notas. Adicione uma abaixo!</p>';
                return;
            }
            notes.forEach(note => {
                const noteEl = document.createElement('div');
                noteEl.className = 'note-item';
                noteEl.dataset.id = note.id;
                noteEl.innerHTML = `
                    <p class="note-content">${note.content}</p>
                    <div class="note-actions">
                         <i class="fas fa-edit note-button text-blue-500 hover:text-blue-700 note-edit-button"></i>
                         <i class="fas fa-trash-alt note-button text-red-500 hover:text-red-700 note-delete-button"></i>
                    </div>
                `;
                notesContainer.appendChild(noteEl);
            });
        }

        // Adiciona uma nova nota
        async function addNote() {
            const content = newNoteInput.value.trim();
            if (!content) return;

            const { data: { user } } = await supabase.auth.getUser();
            if (!user) return;

            const { error } = await supabase
                .from('notes')
                .insert({ content: content, user_id: user.id });

            if (error) {
                console.error('Erro ao adicionar nota:', error);
            } else {
                newNoteInput.value = ''; // Limpa o campo
            }
        }

        // Apaga uma nota
        async function deleteNote(noteId) {
            const { error } = await supabase
                .from('notes')
                .delete()
                .eq('id', noteId);

            if (error) {
                console.error('Erro ao apagar nota:', error);
            }
        }

        // Atualiza uma nota
        async function updateNote(noteId, content) {
            const { error } = await supabase
                .from('notes')
                .update({ content: content })
                .eq('id', noteId);
            if (error) {
                console.error('Erro ao atualizar nota:', error);
            }
        }

        function showEditNoteModal(id, content) {
            editingNoteId = id;
            editNoteInput.value = content;
            editNoteModal.classList.remove('hidden');
            editNoteModal.classList.add('flex');
            editNoteInput.focus();
        }

        function closeEditNoteModal() {
            editingNoteId = null;
            editNoteModal.classList.add('hidden');
            editNoteModal.classList.remove('flex');
        }

        // --- FUNÇÕES DA LISTA DE COMPRAS ---

        // Função para buscar e renderizar a lista de compras
        async function fetchShoppingList() {
            let query = supabase.from('shopping_list').select('*');

            if (currentFilter === 'to-buy') {
                query = query.eq('is_checked', false);
            } else if (currentFilter === 'bought') {
                query = query.eq('is_checked', true);
            }

            const { data, error } = await query.order('created_at', { ascending: true });

            if (error) {
                console.error('Erro ao buscar a lista de compras:', error);
                shoppingListContainer.innerHTML = '<p class="text-center text-red-500">Erro ao carregar a lista.</p>';
            } else {
                renderShoppingList(data);
            }
        }

        // Função para renderizar os itens na UI
        function renderShoppingList(items) {
            shoppingListContainer.innerHTML = ''; // Limpa a lista
            if (items.length === 0) {
                shoppingListContainer.innerHTML = '<p class="text-center text-gray-500">A lista está vazia. Adicione um item!</p>';
                return;
            }
            items.forEach(item => {
                const itemDiv = document.createElement('div');
                itemDiv.dataset.id = item.id;
                
                // Adiciona a classe de cor se o item estiver marcado
                if (item.is_checked) {
                    itemDiv.className = 'shopping-list-item flex items-center justify-between p-3 border-b border-gray-200 bg-green-200 rounded-lg shadow-sm transition-colors duration-200';
                } else {
                    itemDiv.className = 'shopping-list-item flex items-center justify-between p-3 border-b border-gray-200 bg-orange-200 rounded-lg shadow-sm transition-colors duration-200';
                }
                
                // Div para agrupar quantidade e nome
                const mainContent = document.createElement('div');
                mainContent.className = 'flex items-center flex-grow space-x-2';

                // Span para a quantidade e unidade
                const quantitySpan = document.createElement('span');
                quantitySpan.className = 'text-gray-800 font-medium whitespace-nowrap';
                if (item.quantity || item.unit) {
                    quantitySpan.textContent = `${item.quantity || ''} ${item.unit || ''}`;
                }

                // Span para o nome do item
                const itemNameSpan = document.createElement('span');
                itemNameSpan.className = 'text-lg text-gray-800 cursor-pointer truncate flex-grow';
                itemNameSpan.textContent = item.item_name;
                itemNameSpan.addEventListener('click', () => {
                    if (currentFilter === 'all') {
                        // In 'all' view, just toggle without confirmation
                        toggleItemChecked(item.id, !item.is_checked);
                    } else {
                        // In filtered views, ask for confirmation
                        showMoveItemConfirmationModal(item.id, !item.is_checked);
                    }
                });
                
                // Botões de ação
                const actionButtons = document.createElement('div');
                actionButtons.className = 'flex items-center space-x-2 flex-shrink-0';
                
                // Botão de Excluir
                const deleteButton = document.createElement('button');
                deleteButton.className = 'delete-item-button p-1 text-red-500 hover:text-red-700 transition-colors';
                deleteButton.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.013 21H7.987a2 2 0 01-1.92-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                `;
                
                // Botão de Editar
                const editButton = document.createElement('button');
                editButton.className = 'edit-item-button p-1 text-gray-500 hover:text-gray-700 transition-colors';
                editButton.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                    </svg>
                `;
                editButton.addEventListener('click', () => showEditItemModal(item.id, item.item_name, item.quantity, item.unit));
                
                // Monta a estrutura
                mainContent.appendChild(quantitySpan);
                mainContent.appendChild(itemNameSpan);
                actionButtons.appendChild(deleteButton);
                actionButtons.appendChild(editButton);

                itemDiv.appendChild(mainContent);
                itemDiv.appendChild(actionButtons);

                shoppingListContainer.appendChild(itemDiv);
            });
        }
        
        // Função para mostrar o modal de edição
        function showEditItemModal(itemId, itemName, itemQuantity, itemUnit) {
            editingItemId = itemId;
            editItemInput.value = itemName;
            editItemQuantity.value = itemQuantity || '';
            editItemUnit.value = itemUnit || 'uni';
            editItemModal.classList.remove('hidden');
            editItemModal.classList.add('flex');
            editItemInput.focus();
        }
        
        // Função para fechar o modal de edição
        function closeEditItemModal() {
            editingItemId = null;
            editItemInput.value = '';
            editItemQuantity.value = '';
            editItemUnit.value = 'uni';
            editItemModal.classList.add('hidden');
            editItemModal.classList.remove('flex');
        }

        // Função para atualizar um item
        async function updateItem(itemId, newItemName, newQuantity, newUnit) {
            const { error } = await supabase
                .from('shopping_list')
                .update({ item_name: newItemName, quantity: newQuantity, unit: newUnit })
                .eq('id', itemId);

            if (error) {
                console.error('Erro ao atualizar item:', error);
            }
        }
        
        // NOVA FUNÇÃO: Alternar o estado de marcado do item
        async function toggleItemChecked(itemId, newStatus) {
            const { error } = await supabase
                .from('shopping_list')
                .update({ is_checked: newStatus })
                .eq('id', itemId);
            
            if (error) {
                console.error('Erro ao atualizar status do item:', error);
            }
        }

        // Função para adicionar um novo item
        async function addItem() {
            const newItemName = addItemNameInput.value.trim();
            const newQuantity = parseFloat(addItemQuantityInput.value) || null;
            const newUnit = addItemUnitInput.value;

            if (!newItemName) {
                return;
            }
            
            const { error } = await supabase
                .from('shopping_list')
                .insert([{ item_name: newItemName, quantity: newQuantity, unit: newUnit }]);
            
            if (error) {
                console.error('Erro ao adicionar item:', error);
            } else {
                addItemNameInput.value = ''; // Limpa os campos
                addItemQuantityInput.value = '';
                addItemUnitInput.value = 'uni';
                hideAddItemModal(); // Fecha o modal
            }
        }

        // Função para deletar um item
        async function deleteItem(itemId) {
            const { error } = await supabase
                .from('shopping_list')
                .delete()
                .eq('id', itemId);

            if (error) {
                console.error('Erro ao deletar item:', error);
            }
        }
        
        // Listener em tempo real para a lista de compras
        const shoppingListChannel = supabase.channel('public:shopping_list')
            .on('postgres_changes', { event: '*', schema: 'public', table: 'shopping_list' }, payload => {
                fetchShoppingList();
            })
            .subscribe((status, err) => {
                if (status === 'SUBSCRIBED') {
                    console.log('Real-time subscription to shopping_list successful!');
                }
                if (err) {
                    console.error('Real-time subscription error:', err);
                }
            });

        // --- FUNÇÕES DO FILTRO ---
        function setActiveFilter(filter) {
            // Reset all to inactive styles
            filterAllButton.classList.remove('bg-indigo-600', 'text-white');
            filterAllButton.classList.add('bg-indigo-200', 'text-indigo-800');

            filterToBuyButton.classList.remove('bg-orange-500', 'text-white');
            filterToBuyButton.classList.add('bg-orange-200', 'text-orange-800');

            filterBoughtButton.classList.remove('bg-green-500', 'text-white');
            filterBoughtButton.classList.add('bg-green-200', 'text-green-800');

            // Set the clicked one to active
            if (filter === 'all') {
                filterAllButton.classList.add('bg-indigo-600', 'text-white');
                filterAllButton.classList.remove('bg-indigo-200', 'text-indigo-800');
            } else if (filter === 'to-buy') {
                filterToBuyButton.classList.add('bg-orange-500', 'text-white');
                filterToBuyButton.classList.remove('bg-orange-200', 'text-orange-800');
            } else if (filter === 'bought') {
                filterBoughtButton.classList.add('bg-green-500', 'text-white');
                filterBoughtButton.classList.remove('bg-green-200', 'text-green-800');
            }
        }

        // --- EVENT LISTENERS ---
        // Delegação de evento para os botões de usuário
        userListContainer.addEventListener('click', (e) => {
            const userCard = e.target.closest('.user-card');
            if (userCard) {
                selectedEmail = userCard.dataset.email;
                toggleUI(false, 'login');
            }
        });

        // Evento para o botão de Login
        loginButton.addEventListener('click', async () => {
            const email = selectedEmail;
            const password = passwordInput.value;

            const { error } = await supabase.auth.signInWithPassword({ email, password });

            if (error) {
                console.error(error);
            }
        });

        // Evento para o botão de Redefinir Senha
        resetPasswordButton.addEventListener('click', async () => {
            const email = selectedEmail;
            // Define o URL de redirecionamento para o seu próprio site
            const redirectToUrl = `${window.location.origin}${window.location.pathname}`;

            const { error } = await supabase.auth.resetPasswordForEmail(email, {
                redirectTo: redirectToUrl
            });

            if (error) {
                console.error(error);
                // O Supabase tem um limite de tempo. O erro 429 é o "Too Many Requests".
                if (error.status === 429) {
                     // Extrai o tempo restante da mensagem de erro
                    const waitTimeMatch = error.message.match(/after (\d+) seconds/);
                    const waitTime = waitTimeMatch ? parseInt(waitTimeMatch[1]) : 60;
                    showWaitModal(waitTime);
                }
            } else {
                resetEmailDisplay.textContent = email;
                resetPasswordModal.classList.remove('hidden');
                resetPasswordModal.classList.add('flex');
            }
        });

        // Evento para o botão de Voltar
        backButton.addEventListener('click', () => {
            toggleUI(false, 'initial');
            passwordInput.value = ''; // Limpa a senha
        });

        // Evento para o novo botão de Voltar
        backButtonNewPassword.addEventListener('click', () => {
            toggleUI(false, 'initial');
            newPasswordInput.value = ''; // Limpa os campos
            confirmPasswordInput.value = '';
        });


        // Evento para atualizar a senha
        updatePasswordButton.addEventListener('click', async () => {
            const newPassword = newPasswordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            if (newPassword !== confirmPassword) {
                alert('As senhas não coincidem.');
                return;
            }
            if (newPassword.length < 6) {
                alert('A senha deve ter pelo menos 6 caracteres.');
                return;
            }

            const { error } = await supabase.auth.updateUser({ password: newPassword });

            if (error) {
                console.error(error);
            } else {
                newPasswordInput.value = '';
                confirmPasswordInput.value = '';
                setTimeout(() => {
                    window.location.href = window.location.origin + window.location.pathname;
                }, 1000);
            }
        });

        // Fecha o modal de redefinição de senha
        closeModalButton.addEventListener('click', () => {
            resetPasswordModal.classList.add('hidden');
            resetPasswordModal.classList.remove('flex');
        });

        // Fecha o modal de espera
        closeWaitModalButton.addEventListener('click', () => {
            waitMessageModal.classList.add('hidden');
            waitMessageModal.classList.remove('flex');
        });
        
        // --- NOVOS EVENTOS PARA O MODAL DO PERFIL ---
        
        // Abre o modal do perfil
        profileButton.addEventListener('click', async () => {
            const { data: { session } } = await supabase.auth.getSession();
            if (session) {
                profileModal.classList.remove('hidden');
                profileModal.classList.add('flex');
            }
        });
        
        // Fecha o modal do perfil
        closeProfileModalButton.addEventListener('click', () => {
            profileModal.classList.add('hidden');
            profileModal.classList.remove('flex');
        });
        
        // Ação para o botão "Editar Perfil"
        editProfileButton.addEventListener('click', async () => {
            profileModal.classList.add('hidden');
            profileModal.classList.remove('flex');
            editProfileModal.classList.remove('hidden');
            editProfileModal.classList.add('flex');
            const { data, error } = await supabase.from('profiles').select('profile_name').eq('id', (await supabase.auth.getSession()).data.session.user.id).single();
            if (!error && data?.profile_name) {
                profileNameInput.value = data.profile_name;
            }
        });

        // Fecha o modal de editar perfil e volta para o modal de opções
        closeEditProfileModalButton.addEventListener('click', () => {
            editProfileModal.classList.add('hidden');
            editProfileModal.classList.remove('flex');
            profileModal.classList.remove('hidden');
            profileModal.classList.add('flex');
            uploadMessage.style.display = 'none';
        });

        // Ação para o botão "Trocar Senha" (dispara o fluxo de redefinição de senha)
        changePasswordButton.addEventListener('click', async () => {
            profileModal.classList.add('hidden');
            profileModal.classList.remove('flex');
            const { data: { session } } = await supabase.auth.getSession();
            const user = session?.user;

            if (user && user.email) {
                const redirectToUrl = `${window.location.origin}${window.location.pathname}`;
                
                try {
                    const { error } = await supabase.auth.resetPasswordForEmail(user.email, { redirectTo: redirectToUrl });

                    if (error) {
                         if (error.status === 429) {
                            const waitTimeMatch = error.message.match(/after (\d+) seconds/);
                            const waitTime = waitTimeMatch ? parseInt(waitTimeMatch[1]) : 60;
                            showWaitModal(waitTime);
                         }
                         console.error(error);
                    } else {
                        resetEmailDisplay.textContent = user.email;
                        resetPasswordModal.classList.remove('hidden');
                        resetPasswordModal.classList.add('flex');
                    }
                } catch (err) {
                     console.error(err);
                }
            }
        });
        
        // Ação para o botão "Sair" (dentro do modal)
        logoutButtonModal.addEventListener('click', async () => {
            const { error } = await supabase.auth.signOut();
            if (error) {
                console.error('Erro ao sair:', error);
            } else {
                toggleUI(false, 'initial');
                passwordInput.value = '';
            }
        });

        // Ação de upload da nova foto
        uploadAvatarButton.addEventListener('click', async () => {
            const { data: { session } = {} } = await supabase.auth.getSession();
            const user = session?.user;

            if (!user) {
                uploadMessage.textContent = 'Erro: Nenhum usuário logado.';
                uploadMessage.style.display = 'block';
                return;
            }

            const file = avatarUploadInput.files[0];
            if (!file) {
                uploadMessage.textContent = 'Por favor, selecione um arquivo.';
                uploadMessage.style.display = 'block';
                return;
            }

            uploadMessage.textContent = 'Carregando...';
            uploadMessage.style.display = 'block';
            uploadMessage.classList.remove('text-red-700', 'text-green-700');
            uploadMessage.classList.add('text-gray-700');

            const filePath = `${user.id}/${file.name}`;
            const { error: uploadError } = await supabase.storage
                .from('avatars')
                .upload(filePath, file, {
                    cacheControl: '3600',
                    upsert: true
                });

            if (uploadError) {
                console.error(uploadError);
                uploadMessage.textContent = `Erro ao fazer upload: ${uploadError.message}`;
                uploadMessage.classList.add('text-red-700');
            } else {
                const { data: { publicUrl }, error: urlError } = supabase.storage
                    .from('avatars')
                    .getPublicUrl(filePath);

                if (urlError) {
                    console.error(urlError);
                    uploadMessage.textContent = 'Erro ao obter o URL da imagem.';
                    uploadMessage.classList.add('text-red-700');
                    return;
                }

                const { error: updateError } = await supabase
                    .from('profiles')
                    .update({ avatar_url: publicUrl })
                    .eq('id', user.id);

                if (updateError) {
                    console.error(updateError);
                    uploadMessage.textContent = `Erro ao atualizar perfil: ${updateError.message}`;
                    uploadMessage.classList.add('text-red-700');
                } else {
                    userAvatarLoggedIn.src = publicUrl; // Atualiza a foto na UI
                    uploadMessage.textContent = 'Upload bem-sucedido!';
                    uploadMessage.classList.add('text-green-700');
                    avatarUploadInput.value = null; // Limpa o input
                    fetchUsers();
                }
            }
        });

        // Evento para o botão de atualização do nome do perfil
        updateProfileButton.addEventListener('click', async () => {
            const { data: { session } = {} } = await supabase.auth.getSession();
            const user = session?.user;
            if (!user) {
                uploadMessage.textContent = 'Erro: Nenhum usuário logado.';
                uploadMessage.style.display = 'block';
                return;
            }
            const newProfileName = profileNameInput.value;
            if (!newProfileName) {
                uploadMessage.textContent = 'O nome do perfil não pode ser vazio.';
                uploadMessage.style.display = 'block';
                return;
            }

            uploadMessage.textContent = 'Atualizando nome do perfil...';
            uploadMessage.style.display = 'block';
            uploadMessage.classList.remove('text-red-700', 'text-green-700');
            uploadMessage.classList.add('text-gray-700');

            const { error: updateError } = await supabase
                .from('profiles')
                .update({ profile_name: newProfileName })
                .eq('id', user.id);

            if (updateError) {
                console.error(updateError);
                uploadMessage.textContent = `Erro ao atualizar nome do perfil: ${updateError.message}`;
                uploadMessage.classList.add('text-red-700');
            } else {
                userEmailDisplay.textContent = newProfileName;
                uploadMessage.textContent = 'Nome do perfil atualizado com sucesso!';
                uploadMessage.classList.add('text-green-700');
                fetchUsers();
            }
        });
        
        // Evento para abrir o modal da lista de compras
        shoppingListItemGrid.addEventListener('click', () => {
            shoppingListModal.classList.remove('hidden');
            shoppingListModal.classList.add('flex');
            // Set initial filter to 'all' and update button styles
            currentFilter = 'all';
            setActiveFilter('all');
            fetchShoppingList();
        });

        // Evento para fechar o modal da lista de compras
        closeShoppingListButton.addEventListener('click', () => {
            shoppingListModal.classList.add('hidden');
            shoppingListModal.classList.remove('flex');
        });

        // Delegação de evento para deletar itens da lista
        shoppingListContainer.addEventListener('click', (e) => {
            const deleteButton = e.target.closest('.delete-item-button');
            if (deleteButton) {
                const itemDiv = deleteButton.closest('.shopping-list-item');
                const itemId = itemDiv.dataset.id;
                showDeleteConfirmationModal(itemId, 'shopping_item');
            }
        });
        
        // Eventos para o novo modal de edição
        saveEditButton.addEventListener('click', async () => {
            if (editingItemId) {
                await updateItem(editingItemId, editItemInput.value.trim(), parseFloat(editItemQuantity.value), editItemUnit.value);
                closeEditItemModal();
            }
        });

        cancelEditButton.addEventListener('click', closeEditItemModal);
        closeEditItemModalButton.addEventListener('click', closeEditItemModal);
        
        // Eventos para os botões de filtro
        filterAllButton.addEventListener('click', () => {
            currentFilter = 'all';
            setActiveFilter('all');
            fetchShoppingList();
        });
        
        filterToBuyButton.addEventListener('click', () => {
            currentFilter = 'to-buy';
            setActiveFilter('to-buy');
            fetchShoppingList();
        });
        
        filterBoughtButton.addEventListener('click', () => {
            currentFilter = 'bought';
            setActiveFilter('bought');
            fetchShoppingList();
        });
        
        // Funções e eventos para o modal de ADICIONAR item
        function showAddItemModal() {
            addItemModal.classList.remove('hidden');
            addItemModal.classList.add('flex');
            addItemNameInput.focus();
        }

        function hideAddItemModal() {
            addItemModal.classList.add('hidden');
            addItemModal.classList.remove('flex');
        }

        showAddItemModalButton.addEventListener('click', showAddItemModal);
        closeAddItemModalButton.addEventListener('click', hideAddItemModal);
        addItemCancelButton.addEventListener('click', hideAddItemModal);
        addItemConfirmButton.addEventListener('click', addItem);

        // Eventos para o modal de CONFIRMAÇÃO DE EXCLUSÃO
        function showDeleteConfirmationModal(id, type) {
            itemToDeleteInfo = { id, type };
            const messageEl = document.getElementById('delete-confirm-message');
            
            // Esconde o header principal para evitar sobreposição
            mainHeader.classList.add('hidden');

            if (type === 'note') {
                messageEl.textContent = 'Tem a certeza que quer apagar esta nota?';
                // Força o modal de notas a ficar para trás
                notesModal.style.zIndex = '30';
            } else {
                messageEl.textContent = 'Tem certeza que deseja excluir este item da lista?';
                 // Força o modal da lista de compras a ficar para trás
                shoppingListModal.style.zIndex = '30';
            }
            deleteConfirmModal.classList.remove('hidden');
            deleteConfirmModal.classList.add('flex');
        }

        function hideDeleteConfirmationModal() {
            itemToDeleteInfo = null;
            deleteConfirmModal.classList.add('hidden');
            deleteConfirmModal.classList.remove('flex');
            // Restaura a prioridade dos modais para o valor padrão definido no CSS
            notesModal.style.zIndex = '';
            shoppingListModal.style.zIndex = '';
            // Mostra o header principal novamente
            mainHeader.classList.remove('hidden');
        }

        confirmDeleteButton.addEventListener('click', async () => {
            if (itemToDeleteInfo) {
                if (itemToDeleteInfo.type === 'note') {
                    await deleteNote(itemToDeleteInfo.id);
                    fetchNotes(); // Atualiza a lista de notas manualmente
                } else {
                    await deleteItem(itemToDeleteInfo.id);
                }
            }
            hideDeleteConfirmationModal();
        });

        cancelDeleteButton.addEventListener('click', () => {
            hideDeleteConfirmationModal();
        });

        // Funções e eventos para o modal de MOVER item
        function showMoveItemConfirmationModal(itemId, newStatus) {
            itemToMove = { id: itemId, status: newStatus };
            if (newStatus === false) { // Movendo de 'comprado' para 'para comprar'
                moveItemConfirmMessage.textContent = "Deseja adicionar este item à lista 'Para comprar'?";
            } else { // Movendo de 'para comprar' para 'comprado'
                moveItemConfirmMessage.textContent = "Deseja mover este item para a lista de 'Comprados'?";
            }
            moveItemModal.classList.remove('hidden');
            moveItemModal.classList.add('flex');
        }

        function hideMoveItemConfirmationModal() {
            itemToMove = null;
            moveItemModal.classList.add('hidden');
            moveItemModal.classList.remove('flex');
        }

        confirmMoveButton.addEventListener('click', () => {
            if (itemToMove) {
                toggleItemChecked(itemToMove.id, itemToMove.status);
            }
            hideMoveItemConfirmationModal();
        });

        cancelMoveButton.addEventListener('click', () => {
            hideMoveItemConfirmationModal();
        });

        // --- EVENTOS DO MODAL DE CONFIGURAÇÕES ---

        settingsButton.addEventListener('click', () => {
            profileModal.classList.add('hidden');
            profileModal.classList.remove('flex');
            settingsModal.classList.remove('hidden');
            settingsModal.classList.add('flex');
        });

        closeSettingsModalButton.addEventListener('click', () => {
            settingsModal.classList.add('hidden');
            settingsModal.classList.remove('flex');
        });

        wallpaperColorInput.addEventListener('input', async (e) => {
            const color = e.target.value;
            const preferences = { type: 'color', value: color };
            applyWallpaper(preferences);
            await saveUserPreferences(preferences);
        });

        wallpaperUploadInput.addEventListener('change', async (e) => {
            const file = e.target.files[0];
            if (!file) return;

            const { data: { user } } = await supabase.auth.getUser();
            if (!user) {
                wallpaperUploadMessage.textContent = 'Usuário não encontrado.';
                wallpaperUploadMessage.style.display = 'block';
                return;
            }

            wallpaperUploadMessage.textContent = 'Carregando imagem...';
            wallpaperUploadMessage.style.display = 'block';
            wallpaperUploadMessage.classList.remove('text-red-700', 'text-green-700');

            // ATENÇÃO: Crie um bucket PÚBLICO no Supabase chamado 'wallpapers' para que isso funcione.
            const filePath = `${user.id}/${file.name}`;

            const { error: uploadError } = await supabase.storage
                .from('wallpapers')
                .upload(filePath, file, {
                    cacheControl: '3600',
                    upsert: true // Sobrescreve a imagem anterior
                });

            if (uploadError) {
                wallpaperUploadMessage.textContent = `Erro no upload: ${uploadError.message}`;
                wallpaperUploadMessage.classList.add('text-red-700');
                console.error(uploadError);
                return;
            }

            const { data } = supabase.storage
                .from('wallpapers')
                .getPublicUrl(filePath);
            
            // Adiciona um timestamp para evitar problemas de cache do navegador
            const publicUrl = `${data.publicUrl}?t=${new Date().getTime()}`;

            const preferences = { type: 'image', value: publicUrl };
            applyWallpaper(preferences);
            await saveUserPreferences(preferences);

            wallpaperUploadMessage.textContent = 'Papel de parede atualizado!';
            wallpaperUploadMessage.classList.add('text-green-700');
            wallpaperUploadInput.value = ''; // Limpa o input
        });

        removeWallpaperButton.addEventListener('click', async () => {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) return;
            
            // Primeiro, remove a preferência do banco de dados para evitar que a imagem reapareça
            await saveUserPreferences(null);
            applyWallpaper(null); // Remove o papel de parede da UI

            // Opcional: Tenta remover o ficheiro do storage
            // Busca a preferência antiga para saber o nome do ficheiro
            const { data: profileData } = await supabase.from('profiles').select('preferences').eq('id', user.id).single();
            if (profileData && profileData.preferences && profileData.preferences.type === 'image') {
                try {
                    // Extrai o caminho do ficheiro do URL público
                    const url = new URL(profileData.preferences.value);
                    const filePath = url.pathname.split('/wallpapers/')[1];
                    if(filePath) {
                        await supabase.storage.from('wallpapers').remove([filePath]);
                    }
                } catch(e) {
                    console.error("Não foi possível remover o ficheiro de papel de parede antigo:", e);
                }
            }
        });
        
        // --- EVENTOS DO APP DE NOTAS ---
        notesAppIcon.addEventListener('click', () => {
            notesModal.classList.remove('hidden');
            notesModal.classList.add('flex');
            fetchNotes();
        });

        closeNotesModalButton.addEventListener('click', () => {
            notesModal.classList.add('hidden');
            notesModal.classList.remove('flex');
        });

        addNoteButton.addEventListener('click', addNote);

        notesContainer.addEventListener('click', (e) => {
            const target = e.target;
            const noteEl = target.closest('.note-item');
            if (!noteEl) return;

            const noteId = noteEl.dataset.id;

            if (target.classList.contains('note-delete-button')) {
                showDeleteConfirmationModal(noteId, 'note');
            } else if (target.classList.contains('note-edit-button')) {
                const content = noteEl.querySelector('.note-content').textContent;
                showEditNoteModal(noteId, content);
            }
        });
        
        // Eventos do modal de edição de nota
        closeEditNoteModalButton.addEventListener('click', closeEditNoteModal);
        cancelNoteEditButton.addEventListener('click', closeEditNoteModal);
        saveNoteEditButton.addEventListener('click', async () => {
            if (editingNoteId) {
                const newContent = editNoteInput.value.trim();
                await updateNote(editingNoteId, newContent);
                closeEditNoteModal();
            }
        });


        // --- LÓGICA DE ARRASTAR E SOLTAR (DRAG AND DROP) ---
        

        function initializeDragAndDrop() {
            const currentDraggables = document.querySelectorAll('.app-container');
            currentDraggables.forEach(draggable => {
                draggable.addEventListener('dragstart', () => {
                    draggable.classList.add('dragging');
                });

                draggable.addEventListener('dragend', () => {
                    draggable.classList.remove('dragging');
                });
            });
        }
        
        buttonGridContainer.addEventListener('dragover', e => {
            e.preventDefault();
            const afterElement = getDragAfterElement(buttonGridContainer, e.clientX, e.clientY);
            const dragging = document.querySelector('.app-container.dragging');
            if (dragging) {
                 if (afterElement == null) {
                    buttonGridContainer.appendChild(dragging);
                } else {
                    buttonGridContainer.insertBefore(dragging, afterElement);
                }
            }
        });

        function getDragAfterElement(container, x, y) {
            const draggableElements = [...container.querySelectorAll('.app-container:not(.dragging)')];

            return draggableElements.reduce((closest, child) => {
                const box = child.getBoundingClientRect();
                const offsetX = x - box.left - box.width / 2;
                const offsetY = y - box.top - box.height / 2;
                const offset = Math.sqrt(offsetX * offsetX + offsetY * offsetY);

                if (offset < closest.offset) {
                    return { offset: offset, element: child };
                } else {
                    return closest;
                }
            }, { offset: Number.POSITIVE_INFINITY }).element;
        }


        // --- VERIFICAÇÃO DE ESTADO DE AUTENTICAÇÃO E URL ---
        supabase.auth.onAuthStateChange((event, session) => {
            if (session) {
                loadUserProfile(session.user);
                loadUserPreferences();
                toggleUI(true);
                initializeDragAndDrop();

                // Inicia a subscrição em tempo real para as notas
                if (!notesSubscription) {
                    notesSubscription = supabase.channel('public:notes')
                        .on('postgres_changes', { event: '*', schema: 'public', table: 'notes', filter: `user_id=eq.${session.user.id}` }, payload => {
                            fetchNotes();
                        })
                        .subscribe();
                }
            } else {
                const params = new URLSearchParams(window.location.hash.substring(1));
                if (params.get('type') === 'recovery') {
                    toggleUI(false, 'new-password');
                } else {
                    toggleUI(false, 'initial');
                }
                if (event === 'SIGNED_OUT') {
                    // Remove a subscrição ao sair
                    if (notesSubscription) {
                        supabase.removeChannel(notesSubscription);
                        notesSubscription = null;
                    }
                }
            }
        });
        
        // Chamada inicial para carregar os usuários
        fetchUsers();

        // Novo: Evento para mostrar os perfis
        showProfilesButton.addEventListener('click', () => {
            toggleUI(false, 'user-list');
        });
    </script>
</body>
</html>

